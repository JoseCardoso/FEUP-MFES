class Rail is subclass of RailwayElement
types
-- TODO Define types here
values


instance variables

	public train : [Train] := nil;
	
	
	inv clockwiseElement <> nil => isofclass(RailwayElement, clockwiseElement);
	
	inv counterClockwiseElement <> nil => isofclass(RailwayElement, counterClockwiseElement);

operations
-- places a train in the corresponding railwayElement
	public placeTrain: Train ==> ()
		placeTrain(newTrain) == (
			train := newTrain;
		)
		pre
			train = nil
		post
			train <> nil;

-- removes train from railwayElement			
	public removeTrain: Train ==> ()
		removeTrain(oldTrain) == (
			train := nil;
		)
		pre
			train <> nil and oldTrain = train
		post
			train = nil;
			
-- check if train is in ralewayElement 
	public checkTrain: Train ==> bool
		checkTrain(thisTrain) == (
			if thisTrain = train then return true
			else return false;
		)
		pre
			train <> nil;
			
-- check train direction
	public checkDirectionOfTrain: () ==> Train`Direction
		 checkDirectionOfTrain() == (
		 return train.direction;
		 )
		 pre
		 	train <> nil;
		 	
-- check if has a train going clockwise
	public checkClockwiseTrain: () ==> bool
		 checkClockwiseTrain() == (
		 if train.direction = <ClOCKWISE> then return true
		 else return false
		 )
		 pre
		 	train <> nil;

-- check if has a train going counterclockwise
	public checkCounterClockwiseTrain: () ==> bool
		 checkCounterClockwiseTrain() == (
		 if train.direction = <COUNTERCLOCKWISE> then return true
		 else return false
		 )
		 pre
		 	train <> nil;
		
-- Initialize Semaphore
	public initializeSemaphores: () ==> ()
	initializeSemaphores() == (
		-- semaphores never get red nor green initially, as there are no trains
		changeClockwiseSemaphore(<Yellow>);
		changeCounterClockwiseSemaphore(<Yellow>);
	)

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Rail