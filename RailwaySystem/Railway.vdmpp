class Railway
types
	
values
-- TODO Define values here

instance variables

public trainCounter : nat := 0;
public railwayElements: seq of RailwayElement := [];
public trains: set of Train := {};


operations

-- adds a railwayelement to the end of the current sequence
	public appendRailwayElement: RailwayElement ==> ()
	appendRailwayElement(newRailwayElement) == (
		if (len railwayElements > 0) then (
		
			-- set elements ordering
			newRailwayElement.setCounterClockwiseElement(railwayElements(len railwayElements));
			railwayElements(len railwayElements).clockwiseElement := newRailwayElement;
		);
		
		-- add element to seq
		railwayElements := railwayElements ^ [newRailwayElement];
		
		if isofclass(Rail, newRailwayElement) then (
			IO`print("Added new rail.\n")
		) else (
			IO`print("Added new Station.\n")
		)
	)pre
		len railwayElements > 0 and isofclass(Station, newRailwayElement) => not isofclass(Station, railwayElements(len railwayElements))
post
		len railwayElements = (len railwayElements~ + 1) and
		len railwayElements > 1 => railwayElements(len railwayElements - 1).clockwiseElement = railwayElements(len railwayElements) and
		len railwayElements > 1 => railwayElements(len railwayElements).counterClockwiseElement = railwayElements(len railwayElements - 1);


--sets circular railway ( joins first with last )
public setCircularRailway: () ==> ()
 setCircularRailway() == (
		railwayElements(len railwayElements).clockwiseElement := railwayElements(1);
		railwayElements(1).counterClockwiseElement := railwayElements(len railwayElements);
		initAllSemaphores();
		IO`print("Closed Track.\n");
	)
	post
		railwayElements(1).counterClockwiseElement = railwayElements(len railwayElements) and
		railwayElements(len railwayElements).clockwiseElement = railwayElements(1);

-- Places a new train in a station
	public placeTrainInStation: nat1 * Train`Direction * nat1 ==> Train
	placeTrainInStation(index, dir, stationIndex) == (
		dcl train: Train := new Train(index,dir);
		dcl tempSet: set of Train := {train};
		
		railwayElements(stationIndex).placeTrain(train);
		trains := trains union tempSet;
		
		IO`print("Placed new train with id ");
		IO`print(index);
		IO`print(" with direction ");
		IO`print(dir);
		IO`print("in station ");
		IO`print(stationIndex);
		IO`print(".\n");
		
		return train;
		)pre isofclass(Station, railwayElements(stationIndex));

-- removes a train
	public removeTrain: Train * RailwayElement ==> ()
	removeTrain(train, railwayElement) ==
	(
		railwayElement.removeTrain(train);
	);
		
-- Places a new train in a rail
	public placeTrainInRail: nat1 * Train`Direction * nat1 ==> Train
	placeTrainInRail(index, dir, railIndex) == (
		dcl train: Train := new Train(index,dir);
		dcl tempSet: set of Train := {train};
		
		railwayElements(railIndex).placeTrain(train);
		trains := trains union tempSet;
		
		return train;
		)pre isofclass(Rail, railwayElements(railIndex));
		
-- Initializes all semaphores. It calls the corresponding subclass function for elements that are rails and stations
  public initAllSemaphores: () ==> ()
  initAllSemaphores() == (
  for all rail in set {r | r in set elems railwayElements & isofclass(Rail, r)} do (
			rail.initializeSemaphores()
		);
		for all station in set {s | s in set elems railwayElements & isofclass(Station, s)} do (
			station.initializeSemaphores()
		);
  );
  
-- Advances one iteration, making all trains that can move advance 1 element
	public advanceIt: set of Train ==> ()
		advanceIt(trainSet) == (
		dcl movedTrains: set of Train := {};
		dcl stopedTrains: set of Train;
		dcl startElem: RailwayElement;
		dcl finalElem: RailwayElement;
		
		for all train in set trainSet do (
			startElem := iota element in set elems railwayElements & element.checkTrain(train);
			if train.direction = <ClOCKWISE> then (finalElem := startElem.clockwiseElement;)
			else (finalElem := startElem.counterClockwiseElement;);
			if moveTrain(train, startElem, finalElem) then(
			movedTrains := movedTrains union {train};
			IO`print("Moved train ");
			IO`print(train.id);
			IO`print(" in direction ");
			IO`print(train.direction);
			IO`print(".\n");
			)
			else stopedTrains := stopedTrains union {train};
		);
		)
		pre
			card trains > 0 and len railwayElements > 1;

	--Checks railway element type and chooses corresponding function
	public moveTrain: Train * RailwayElement * RailwayElement ==> bool
	moveTrain(train, startElem, finalElem) == (
		if (isofclass(Rail,startElem) and isofclass(Rail, finalElem))
		then return moveTrainRailToRail(train, startElem, finalElem);
		
		if (isofclass(Rail,startElem) and isofclass(Station, finalElem))
		then return moveTrainRailToStation(train, startElem, finalElem);
		
		if (isofclass(Station,startElem) and isofclass(Rail, finalElem))
		then return moveTrainStationToRail(train, startElem, finalElem);
		return false;
	)
		pre
			isofclass(Station,startElem) => isofclass(Rail,finalElem);
		
	--Moves Train from a rail to the next rail
	public moveTrainRailToRail: Train * Rail * Rail ==> bool
		moveTrainRailToRail(train, startElem, finalElem) == (
		if train.direction = <ClOCKWISE> 
			then (
			if startElem.checkClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train);
						startElem.removeTrain(train);
						return true);)
		else(
			if startElem.checkCounterClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train); 
						startElem.removeTrain(train);
						return true);)
		)
		pre
			startElem.train = train 
			and train.direction = <ClOCKWISE> => startElem.clockwiseElement = finalElem 
			and train.direction = <COUNTERCLOCKWISE> => startElem.counterClockwiseElement = finalElem
		
		post
			finalElem.train = train;
			
	--Moves Train from a rail to the next station
	public moveTrainRailToStation: Train * Rail * Station ==> bool
		moveTrainRailToStation(train, startElem, finalElem) == (
		if train.direction = <ClOCKWISE> 
			then (
			if startElem.checkClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train); 
						startElem.removeTrain(train);
						return true);)
		else(
			if startElem.checkCounterClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train); 
						startElem.removeTrain(train);
						return true);)
		)
		pre
			startElem.train = train 
			and train.direction = <ClOCKWISE> => startElem.clockwiseElement = finalElem 
			and train.direction = <COUNTERCLOCKWISE> => startElem.counterClockwiseElement = finalElem
		
		post
			(finalElem.clockwiseTrain = train or finalElem.counterClockwiseTrain =train);


	--Moves Train from a station to the next rail
	public moveTrainStationToRail: Train * Station * Rail ==> bool
		moveTrainStationToRail(train, startElem, finalElem) == (
		if train.direction = <ClOCKWISE> 
			then (
			if startElem.checkClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train); 
						startElem.removeTrain(train);
						return true);)
		else(
			if startElem.checkCounterClockwiseSemaphoreIsRed() 
			then return false
			else (finalElem.placeTrain(train); 
						startElem.removeTrain(train);
						return true);)
		)
		pre
			(startElem.clockwiseTrain = train or startElem.counterClockwiseTrain =train)
			and train.direction = <ClOCKWISE> => startElem.clockwiseElement = finalElem 
			and train.direction = <COUNTERCLOCKWISE> => startElem.counterClockwiseElement = finalElem
		
		post
			finalElem.train = train;
				
	--Checks if a train can leave the station, all the path until the next station must be empty			
	public checkIfTrainCanLeaveStation: Train ==> bool
	checkIfTrainCanLeaveStation(train) == (
	
		dcl trainPosition: Station := iota element in set elems railwayElements & element.checkTrain(train);
		IO`print("Train "); IO`print(train.id); IO`print(" is getting ready to leave station.\n");
		
		if checkFollowingElementsForTrains(train) then(
				IO`print("Train ahead. Must stay in station");
				return false;
		);
		
		
		if train.direction = <ClOCKWISE> then 
			trainPosition.clockwiseElement.changeClockwiseSemaphore(<Green>)
		else
			trainPosition.clockwiseElement.changeCounterClockwiseSemaphore(<Green>);
		IO`print("Success. Semaphores changed.\n");
		return true;
	);
			
	public checkFollowingElementsForTrains: Train ==> bool
	checkFollowingElementsForTrains(train) == (
		
		dcl trainPosition: RailwayElement := iota elem in set elems railwayElements & elem.checkTrain(train);
		dcl nextElements: seq of RailwayElement := [];
		dcl nextElem: RailwayElement;
		if train.direction = <ClOCKWISE> then(
			nextElem := trainPosition.clockwiseElement;
			
			while isofclass(Rail, nextElem) do (
				nextElements := nextElements ^ [nextElem];
				nextElem := nextElem.clockwiseElement;
			);
			IO`print( "\n\n ENTROU \n\n");
		 nextElements := nextElements ^ [nextElem];
			
		if exists elem in set elems nextElements & elem.checkCounterClockwiseTrain() and nextElements(len nextElements).checkClockwiseTrain() then (
			IO`print( "\n\n Não Pode avançar C\n\n");
			return true;
		)
		else (
			IO`print( "\n\n Pode avançar C\n\n");
			return false; );
		)
		else (
			nextElem := trainPosition.counterClockwiseElement;
			
			while isofclass(Rail, nextElem) do (
			
				nextElements := nextElements ^ [nextElem];
				nextElem := nextElem.counterClockwiseElement;
			);
			 nextElements := nextElements ^ [nextElem];
			
			
			if exists elem in set elems nextElements & elem.checkClockwiseTrain() and nextElements(len nextElements).checkCounterClockwiseTrain() then (
			IO`print( "\n\nNão pode avançar CC\n\n");
			return true;
		)
		else (
			IO`print( "\n\nPode avançar CC\n\n");
			return false; );
		)
		);
	  
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Railway