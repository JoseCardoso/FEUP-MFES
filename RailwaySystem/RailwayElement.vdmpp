class RailwayElement
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	
	public clockwiseSemaphore: [Semaphore] := nil;
	public counterClockwiseSemaphore: [Semaphore] := nil;
	
	public clockwiseElement: [RailwayElement] := nil;
	public counterClockwiseElement: [RailwayElement] := nil;

operations
/*
public RailwayElement: clockwiseSemaphore * counterClockwiseSemaphore * ClockwiseElement * counterClockwiseElement ==> RailwayElement
	RailwayElement(CSem, CCSem, CElem, CCElem) ==(
	clockwiseSemaphore:= CSem;
	counterClockwiseSe
	)*/
	
-- places a train in the corresponding railwayElement
	public placeTrain: [Train] ==> ()
		placeTrain(newTrain) == 
		is subclass responsibility;
		
-- removes train from railwayElement
	public removeTrain: [Train] ==> ()
		removeTrain(oldTrain) ==
		is subclass responsibility;
		
-- check if train is in ralewayElement 
	public checkTrain: [Train] ==> bool
		checkTrain(thisTrain) ==
		is subclass responsibility;
		
-- check if has a train going clockwise
	public checkClockwiseTrain: () ==> bool
		 checkClockwiseTrain() ==
		 is subclass responsibility; 

-- check if has a train going counterclockwise
	public checkCounterClockwiseTrain: () ==> bool
		 checkCounterClockwiseTrain() ==
		 is subclass responsibility;
		 
-- Changes clockwise semaphore to a specific light
	public changeClockwiseSemaphore: Semaphore`Light ==> ()
	changeClockwiseSemaphore(light) == (
		clockwiseSemaphore.semaphoreLight := light;
	)
	pre light = <Green> => clockwiseElement.clockwiseSemaphore.semaphoreLight <> <Red>;
	

-- Changes counterclockwise semaphore to a specific light
	public changeCounterClockwiseSemaphore: Semaphore`Light ==> ()
	changeCounterClockwiseSemaphore(light) == (
		counterClockwiseSemaphore.semaphoreLight := light;
	)
	pre light = <Green> => counterClockwiseElement.counterClockwiseSemaphore.semaphoreLight <> <Red>;
		 
-- initializes semaphores
	public initializeSemaphores: () ==> ()
	initializeSemaphores() ==
		is subclass responsibility;
		
		
-- checks if the clockwiseSemaphore is red
	public checkClockwiseSemaphoreIsRed: () ==> bool
	checkClockwiseSemaphoreIsRed() == (
			if clockwiseSemaphore.semaphoreLight = <Red> then 
				return true 
			else 
			return false);


-- checks if the counterClockwiseSemaphore is red
	public checkCounterClockwiseSemaphoreIsRed: () ==> bool
	checkCounterClockwiseSemaphoreIsRed() == (
			if counterClockwiseSemaphore.semaphoreLight = <Red> then 
				return true 
			else 
			return false);
			
			
-- sets clockwiseElement
	public setClockwiseElement: RailwayElement ==> ()
	setClockwiseElement(newRailwayElement) == (
		clockwiseElement := newRailwayElement;
	);

-- sets counterClockwiseElement
	public setCounterClockwiseElement: RailwayElement ==> ()
	setCounterClockwiseElement(newRailwayElement) == (
		counterClockwiseElement := newRailwayElement;
	);

		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end RailwayElement